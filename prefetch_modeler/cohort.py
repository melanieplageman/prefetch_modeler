from prefetch_modeler.storage_type import fast_local1, slow_cloud1
from prefetch_modeler.core import Duration, Rate, Simulation
from prefetch_modeler.plot import io_data, wait_data, consumption_rate_data
import matplotlib.pyplot as plt

class Member:
    def __init__(self, storage, workload, prefetcher):
        self.data = None
        self.tracer_data = None
        self._wait_view = None
        self._io_view = None
        self._consumption_rate_view = None
        self.storage = storage
        self.workload = workload
        self.prefetcher = prefetcher
        self.schema = None

    def run(self):
        simulation = Simulation(*self.prefetcher, *self.storage, *self.workload)
        self.schema = simulation.schema

        result = simulation.run(500, duration=Duration(seconds=20), traced=[1, 5, 100])
        data = result.bucket_data
        self.data = data.reindex(data.index.union(data.index[1:] - 1), method='ffill')
        self.tracer_data = result.tracer_data

    @property
    def wait_view(self):
        if self._wait_view is None:
            self._wait_view = wait_data(self.data)
        return self._wait_view

    @property
    def consumption_rate_view(self):
        if self._consumption_rate_view is None:
            self._consumption_rate_view = consumption_rate_data(self.data)
        return self._consumption_rate_view

    @property
    def io_view(self):
        if self._io_view is None:
            self._io_view = io_data(self.data)
        return self._io_view

    @property
    def tracer_view(self):
        return self.tracer_data


class Cohort:
    """
    DataFrames generated by running a list of prefetch algorithms and baseline
    fetchers for a given workload and storage type
    """
    def __init__(self):
        self.members = []

    def run(self, storage, workload, prefetchers):
        for prefetcher in prefetchers:
            self.members.append(Member(storage, workload, prefetcher))

        for member in self.members:
            member.run()

    def dump_plots(self, storage_name, workload_name):
        xlim, xwaitlim = 0, 0
        yratelim = 0
        for member in self.members:
            max_x = max(max(member.consumption_rate_view.index),
                        max(member.io_view.index))
            max_wait_x = max(member.wait_view.index)

            max_rate_y = max(
                max(member.consumption_rate_view.prefetch_rate),
                max(member.consumption_rate_view.consumption_rate))

            xlim = max_x if max_x > xlim else xlim
            xwaitlim = max_wait_x if max_wait_x > xwaitlim else xwaitlim
            yratelim = max_rate_y if max_rate_y > yratelim else yratelim

        directory = f'images/{storage_name}/{workload_name}/'

        for member in self.members:
            title_str = ", ".join(hint for i, hint in
                sorted(bucket_type.hint() for bucket_type in member.schema if
                       bucket_type.hint() is not None)
            )

            figure, axes = plt.subplots(3)
            figure.set_size_inches(15, 11)

            axes[0].set_xlim([0, xlim])
            member.io_view.plot(ax=axes[0], title=title_str)

            axes[1].get_yaxis().set_visible(False)
            axes[1].set_xlim([0, xlim])
            member.wait_view.astype(int).plot.area(ax=axes[1], stacked=False)

            axes[2].set_xlim([0, xlim])
            axes[2].set_ylim([0, yratelim])
            member.consumption_rate_view.plot(ax=axes[2])

            prefetcher_name = '_'.join([bucket.__name__ for bucket in member.prefetcher])
            # plt.savefig(f'{directory}/{prefetcher_name}.png')
            plt.show()

            if not member.tracer_view.empty:
                member.tracer_view.plot(kind='barh', stacked=True)
                plt.savefig(f'{directory}/{prefetcher_name}_tracer.png')

