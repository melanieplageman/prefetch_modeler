from prefetch_modeler.storage_type import fast_local1, slow_cloud1
from prefetch_modeler.core import Duration, Rate, Simulation
from prefetch_modeler.plot import io_data, wait_data
import matplotlib.pyplot as plt

class Member:
    def __init__(self, storage, workload, prefetcher):
        self.data = None
        self.tracer_data = None
        self._wait_view = None
        self._io_view = None
        self.storage = storage
        self.workload = workload
        self.prefetcher = prefetcher

    def run(self):
        simulation = Simulation(*self.prefetcher, *self.storage, *self.workload)
        result = simulation.run(200, duration=Duration(seconds=10), traced=[1, 5, 100])
        data = result.bucket_data
        self.data = data.reindex(data.index.union(data.index[1:] - 1), method='ffill')
        self.tracer_data = result.tracer_data

    @property
    def wait_view(self):
        if self._wait_view is None:
            self._wait_view = wait_data(self.data)
        return self._wait_view

    @property
    def io_view(self):
        if self._io_view is None:
            self._io_view = io_data(self.data)
        return self._io_view

    @property
    def tracer_view(self):
        return self.tracer_data


class Cohort:
    """
    DataFrames generated by running a list of prefetch algorithms and baseline
    fetchers for a given workload and storage type
    """
    def __init__(self):
        self.members = []

    def run(self, storage, workload, prefetchers):
        for prefetcher in prefetchers:
            self.members.append(Member(storage, workload, prefetcher))

        for member in self.members:
            member.run()


    def dump_plots(self, storage_name, workload_name):
        xlim, xwaitlim = 0, 0
        for member in self.members:
            max_x = max(member.io_view.index)
            max_wait_x = max(member.wait_view.index)
            xlim = max_x if max_x > xlim else xlim
            xwaitlim = max_wait_x if max_wait_x > xwaitlim else xwaitlim

        directory = f'images/{storage_name}/{workload_name}/'

        for member in self.members:
            figure, axes = plt.subplots(2)
            axes[0].set_xlim([0, xlim])
            member.io_view.plot(ax=axes[0], title='sample')

            axes[1].get_yaxis().set_visible(False)
            axes[1].set_xlim([0, xlim])
            member.wait_view.astype(int).plot.area(ax=axes[1], stacked=False)

            prefetcher_name = '_'.join([bucket.__name__ for bucket in member.prefetcher])
            plt.savefig(f'{directory}/{prefetcher_name}.png')
            # plt.show()

            if not member.tracer_view.empty:
                member.tracer_view.plot(kind='barh', stacked=True)
                plt.savefig(f'{directory}/{prefetcher_name}_tracer.png')

